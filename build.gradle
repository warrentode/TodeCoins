//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mc_version}-${mod_version}"
group = mod_domain

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: "${mapping_channel}", version: "${mapping_version}"
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "mixins.todecoins.refmap.json"
    config "mixins.todecoins.json"
    showMessageTypes = true
}

repositories {
    mavenCentral()
    maven {
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        url = 'https://jitpack.io'
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // addresses vulnerabilities with imported external libraries
    implementation 'io.netty:netty-codec:4.2.5.Final'
    implementation 'io.netty:netty-handler:4.2.5.Final'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.commons:commons-compress:1.27.1'
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    // cagerium optional support
    implementation fg.deobf("curse.maven:cagerium-709608:4781196")
    // serene seasons & biomesoplenty optional support
    implementation fg.deobf("curse.maven:serene-seasons-291874:6398227")
    implementation fg.deobf("curse.maven:glitchcore-955399:5787839")
    implementation fg.deobf("curse.maven:biomes-o-plenty-220318:6364065")
    implementation fg.deobf("curse.maven:terrablender-563928:6290448")
    // farmers delight optional support
    implementation fg.deobf("curse.maven:farmers-delight-398521:6597298")
    // farmers respite optional support
    implementation fg.deobf("curse.maven:farmers-respite-551453:5543547")
    // delightful optional support
    implementation fg.deobf("curse.maven:delightful-637529:6795369")
    // festive delight optional support
    implementation fg.deobf("curse.maven:festive-delight-711672:4954516")
    // drink beer refill optional support
    implementation fg.deobf("curse.maven:drink-beer-refill-729120:5834463")
    // friends and foes optional support
    implementation fg.deobf("curse.maven:friends-and-foes-forge-602059:6354624")
    // guard villagers optional support
    implementation fg.deobf("curse.maven:guard-villagers-360203:6793945")
    // curios optional support
    runtimeOnly(fg.deobf("curse.maven:curios-309927:6418456"))
    compileOnly(fg.deobf("curse.maven:curios-309927:6418456"))
    // wares optional support
    runtimeOnly(fg.deobf("curse.maven:wares-839158:5726352"))
    compileOnly(fg.deobf("curse.maven:wares-839158:5726352"))
    // supplementaries support
    implementation fg.deobf("curse.maven:supplementaries-412082:6889003")
    implementation fg.deobf("curse.maven:selene-499980:6902841")
    // snowy spirit optional support - requires moonlight lib (selene)
    implementation fg.deobf("curse.maven:snowy-spirit-566142:5928029")
    // tconstruct support
    implementation fg.deobf("curse.maven:mantle-74924:6819217")
    implementation fg.deobf("curse.maven:tinkers-construct-74072:6777068")
    // aether support
    implementation fg.deobf("curse.maven:aether-255308:6134920")
    // ecologics support
    implementation fg.deobf("curse.maven:ecologics-570463:6733908")
    // goblin traders support
    implementation fg.deobf("curse.maven:goblin-traders-363703:6891922")
    implementation fg.deobf("curse.maven:framework-549225:6531428")
    // create support
    implementation fg.deobf("curse.maven:create-328085:6641603")
    // create deco (adds currency)
    implementation fg.deobf("curse.maven:create-deco-509285:6373226")
    // extra bit for create deco support
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.11")

    // craft tweaker - for testing, etc
    runtimeOnly(fg.deobf("curse.maven:crafttweaker-239197:6256146"))
    // catalogue and configured - for testing, etc
    runtimeOnly(fg.deobf("curse.maven:catalogue-459701:4766090"))
    runtimeOnly(fg.deobf("curse.maven:configured-457570:5180900"))

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version      : mc_version,
            minecraft_version_range: minecraft_version_range,
            forge_version          : forge_version,
            forge_version_range    : forge_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            issue_url              : issue_url,
            update_url             : update_url,
            display_url            : display_url,
            jei_version            : jei_version,
            mod_credits            : mod_credits,
            stable_release         : stable_release,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.todecoins.json"
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.register('updateJson') {
    file('update.json').withWriter { w ->
        file('update_template.json').eachLine { line ->
            w << line.replaceAll("stable_release", stable_release)
                    .replaceAll("latest_version", mc_version + "-" + project.version) + System.lineSeparator()
        }
        w.close()
    }
}

tasks.register('updateChangeLog', Exec) {
    workingDir(project.projectDir)
    commandLine 'git', 'log', '--date=short', '--pretty=\\"%cd - %s\\"', '--since=1.month', '--no-merges'
    standardOutput = new PrintStream("${rootDir}/CHANGELOG.txt")
}

tasks.register('deobfJar', Jar) {
    // Generate deobfuscated jar
    from sourceSets.main.output
    archiveClassifier = 'deobf'
}

tasks.register('sourceJar', Jar) {
    // Generate sources jar
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/warrentode/TodeCoins")
            credentials {
                username = System.getenv("USERNAME") ?: project.findProperty("gpr.user")
                password = System.getenv("TOKEN") ?: project.findProperty("gpr.key")
            }
        }
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}