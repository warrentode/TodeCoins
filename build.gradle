//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAccessibility
buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0,6.2', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "${project.mc_version}-${project.mod_version}"
group = "${project.mod_domain}"
base {
    archivesName = "${project.modid}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todecoins'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                todecoins {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todecoins'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                todecoins {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'todecoins'
            mods {
                todecoins {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'todecoins', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                todecoins {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "mixins.todecoins.refmap.json"
    config "mixins.todecoins.json"
    showMessageTypes = true
}

repositories {
    mavenCentral()
    maven {
        url = 'https://maven.minecraftforge.net/'
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        url = 'https://jitpack.io'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // addresses vulnerabilities with imported external libraries
    implementation 'io.netty:netty-codec:4.1.104.Final'
    implementation 'io.netty:netty-handler:4.1.104.Final'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.commons:commons-compress:1.26.1'

    // project mod dependencies
    implementation fg.deobf("curse.maven:curios-309927:5066842")
    implementation fg.deobf("curse.maven:cagerium-709608:4517775")
    implementation fg.deobf("curse.maven:ecologics-570463:4171285")
    implementation fg.deobf("curse.maven:serene-seasons-291874:4037228")
    implementation fg.deobf("curse.maven:friends-and-foes-forge-602059:5184433")
    implementation fg.deobf("curse.maven:guard-villagers-360203:5116175")
    implementation fg.deobf("curse.maven:unusual-end-617757:4549776")
    implementation fg.deobf("curse.maven:farmers-delight-398521:4679318")

    runtimeOnly(fg.deobf("curse.maven:configured-457570:4462837"))

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.modid,
                "Specification-Vendor"    : project.mod_author,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modid,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "mixins.todecoins.json"
        ])
    }
}

tasks.register('updateJson') {
    file('update.json').withWriter { writer ->
        file('update_template.json').eachLine { line ->
            writer << line.replaceAll("version", project.version) + System.getProperty("line.separator")
        }
        writer.close()
    }
}

tasks.register('updateChangeLog', Exec) {
    workingDir(project.projectDir)
    commandLine 'git', 'log', '--date=short', '--pretty=\\"%cd - %s\\"', '--since=1.month', '--no-merges'
    standardOutput = new PrintStream("${rootDir}/CHANGELOG.txt")
}

tasks.register('deobfJar', Jar) {
    // Generate deobfuscated jar
    from sourceSets.main.output
    archiveClassifier = 'deobf'
}

tasks.register('sourceJar', Jar) {
    // Generate sources jar
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives jar
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name = "localRepo"
            url = "file://${project.projectDir}/mcmodsrepo"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.release = 17
}

wrapper {
    gradleVersion = "8.4"
    distributionType = Wrapper.DistributionType.ALL
}