package com.github.warrentode.todecoins.datagen.tags;

import com.github.warrentode.todecoins.entity.TCEntityTypes;
import com.github.warrentode.todecoins.util.tags.TCEntityTypeTags;
import net.minecraft.core.HolderLookup;
import net.minecraft.data.PackOutput;
import net.minecraft.data.tags.EntityTypeTagsProvider;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.EntityType;
import net.minecraftforge.common.data.ExistingFileHelper;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;

public class EntityTypeTagsGen extends EntityTypeTagsProvider {
    public EntityTypeTagsGen(PackOutput output, CompletableFuture<HolderLookup.Provider> provider, String modid, @Nullable ExistingFileHelper existingFileHelper) {
        super(output, provider, modid, existingFileHelper);
    }

    @Override
    protected void addTags(@NotNull HolderLookup.Provider provider) {
        this.registerTags();
    }

    private void registerTags() {
        tag(TCEntityTypeTags.DROPS_COLLECTIBLE_COIN_BLACKLIST);
        tag(TCEntityTypeTags.DROPS_CURRENCY_BLACKLIST);
        tag(TCEntityTypeTags.BOSSES)
                .addTag(TCEntityTypeTags.ENDER_DRAGON_TYPES)
                .addTag(TCEntityTypeTags.ELDER_GUARDIAN_TYPES)
                .addTag(TCEntityTypeTags.WARDEN_TYPES)
                .addTag(TCEntityTypeTags.WITHER_TYPES)
                .addTag(TCEntityTypeTags.WILDFIRE_TYPES);
        tag(TCEntityTypeTags.CAGERIUM_BLACKLIST);
        tag(TCEntityTypeTags.KNOWN_ENTITIES)
                .addTag(TCEntityTypeTags.HAPPY_GHAST_TYPES)
                .addTag(TCEntityTypeTags.CREAKING_TYPES)
                .addTag(TCEntityTypeTags.BREEZE_TYPES)
                .addTag(TCEntityTypeTags.GUARD_TYPES)
                .addTag(TCEntityTypeTags.PENGUIN_TYPES)
                .addTag(TCEntityTypeTags.SQUIRREL_TYPES)
                .addTag(TCEntityTypeTags.CRAB_TYPES)
                .addTag(TCEntityTypeTags.RASCAL_TYPES)
                .addTag(TCEntityTypeTags.WILDFIRE_TYPES)
                .addTag(TCEntityTypeTags.TUFF_GOLEM_TYPES)
                .addTag(TCEntityTypeTags.MOOBLOOM_TYPES)
                .addTag(TCEntityTypeTags.MAULER_TYPES)
                .addTag(TCEntityTypeTags.GLARE_TYPES)
                .addTag(TCEntityTypeTags.COPPER_GOLEM_TYPES)
                .addTag(TCEntityTypeTags.PIGLIN_MERCHANT_TYPES)
                .addTag(TCEntityTypeTags.PIGLIN_BRUTE_TYPES)
                .addTag(TCEntityTypeTags.HOGLIN_TYPES)
                .addTag(TCEntityTypeTags.WOLF_TYPES)
                .addTag(TCEntityTypeTags.WITHER_SKELETON_TYPES)
                .addTag(TCEntityTypeTags.WITHER_TYPES)
                .addTag(TCEntityTypeTags.WITCH_TYPES)
                .addTag(TCEntityTypeTags.WANDERING_TRADER_TYPES)
                .addTag(TCEntityTypeTags.WARDEN_TYPES)
                .addTag(TCEntityTypeTags.VILLAGER_TYPES)
                .addTag(TCEntityTypeTags.TURTLE_TYPES)
                .addTag(TCEntityTypeTags.TROPICAL_FISH_TYPES)
                .addTag(TCEntityTypeTags.TRADER_LLAMA_TYPES)
                .addTag(TCEntityTypeTags.TADPOLE_TYPES)
                .addTag(TCEntityTypeTags.STRIDER_TYPES)
                .addTag(TCEntityTypeTags.STRAY_TYPES)
                .addTag(TCEntityTypeTags.SQUID_TYPES)
                .addTag(TCEntityTypeTags.SPIDER_TYPES)
                .addTag(TCEntityTypeTags.SNOW_GOLEM_TYPES)
                .addTag(TCEntityTypeTags.SNIFFER_TYPES)
                .addTag(TCEntityTypeTags.SLIME_TYPES)
                .addTag(TCEntityTypeTags.SKELETON_HORSE_TYPES)
                .addTag(TCEntityTypeTags.SKELETON_TYPES)
                .addTag(TCEntityTypeTags.SILVERFISH_TYPES)
                .addTag(TCEntityTypeTags.SHULKER_TYPES)
                .addTag(TCEntityTypeTags.SHEEP_TYPES)
                .addTag(TCEntityTypeTags.SALMON_TYPES)
                .addTag(TCEntityTypeTags.RABBIT_TYPES)
                .addTag(TCEntityTypeTags.PUFFERFISH_TYPES)
                .addTag(TCEntityTypeTags.POLAR_BEAR_TYPES)
                .addTag(TCEntityTypeTags.PIGLIN_TYPES)
                .addTag(TCEntityTypeTags.PIG_TYPES)
                .addTag(TCEntityTypeTags.PHANTOM_TYPES)
                .addTag(TCEntityTypeTags.PARROT_TYPES)
                .addTag(TCEntityTypeTags.PANDA_TYPES)
                .addTag(TCEntityTypeTags.NUMISMATIST_TYPES)
                .addTag(TCEntityTypeTags.OCELOT_TYPES)
                .addTag(TCEntityTypeTags.MOOSHROOM_TYPES)
                .addTag(TCEntityTypeTags.MULE_TYPES)
                .addTag(TCEntityTypeTags.MAGMA_CUBE_TYPES)
                .addTag(TCEntityTypeTags.LLAMA_TYPES)
                .addTag(TCEntityTypeTags.IRON_GOLEM_TYPES)
                .addTag(TCEntityTypeTags.HORSE_TYPES)
                .addTag(TCEntityTypeTags.GUARDIAN_TYPES)
                .addTag(TCEntityTypeTags.GOAT_TYPES)
                .addTag(TCEntityTypeTags.GLOW_SQUID_TYPES)
                .addTag(TCEntityTypeTags.GIANT_TYPES)
                .addTag(TCEntityTypeTags.GHAST_TYPES)
                .addTag(TCEntityTypeTags.FROG_TYPES)
                .addTag(TCEntityTypeTags.FOX_TYPES)
                .addTag(TCEntityTypeTags.EVOKER_TYPES)
                .addTag(TCEntityTypeTags.ENDERMITES_TYPES)
                .addTag(TCEntityTypeTags.ENDERMAN_TYPES)
                .addTag(TCEntityTypeTags.ENDER_DRAGON_TYPES)
                .addTag(TCEntityTypeTags.ELDER_GUARDIAN_TYPES)
                .addTag(TCEntityTypeTags.DONKEY_TYPES)
                .addTag(TCEntityTypeTags.DOLPHIN_TYPES)
                .addTag(TCEntityTypeTags.CREEPER_TYPES)
                .addTag(TCEntityTypeTags.COW_TYPES)
                .addTag(TCEntityTypeTags.COD_TYPES)
                .addTag(TCEntityTypeTags.CHICKEN_TYPES)
                .addTag(TCEntityTypeTags.CAVE_SPIDER_TYPES)
                .addTag(TCEntityTypeTags.CAT_TYPES)
                .addTag(TCEntityTypeTags.CAMEL_TYPES)
                .addTag(TCEntityTypeTags.BLAZE_TYPES)
                .addTag(TCEntityTypeTags.BEE_TYPES)
                .addTag(TCEntityTypeTags.BAT_TYPES)
                .addTag(TCEntityTypeTags.AXOLOTL_TYPES)
                .addTag(TCEntityTypeTags.ARMAIDLLO_TYPES)
                .addTag(TCEntityTypeTags.ALLAY_TYPES)
                .addTag(TCEntityTypeTags.ZOMBIES)
                .addTag(TCEntityTypeTags.ILLAGERS);
        tag(TCEntityTypeTags.ILLAGERS)
                .addTag(TCEntityTypeTags.WITCH_TYPES)
                .addTag(TCEntityTypeTags.VEX_TYPES)
                .addTag(TCEntityTypeTags.RAVAGER_TYPES)
                .addTag(TCEntityTypeTags.EVOKER_TYPES)
                .addTag(TCEntityTypeTags.ICEOLOGER_TYPES)
                .addTag(TCEntityTypeTags.ILLUSIONER_TYPES)
                .addTag(TCEntityTypeTags.PILLAGER_TYPES)
                .addTag(TCEntityTypeTags.RAVAGER_TYPES)
                .addTag(TCEntityTypeTags.VINDICATOR_TYPES);
        tag(TCEntityTypeTags.ZOMBIES)
                .addTag(TCEntityTypeTags.BOGGED_TYPES)
                .addTag(TCEntityTypeTags.ZOMBIE_TYPES)
                .addTag(TCEntityTypeTags.ZOMBIE_VILLAGER_TYPES)
                .addTag(TCEntityTypeTags.DROWNED_TYPES)
                .addTag(TCEntityTypeTags.HUSK_TYPES)
                .addTag(TCEntityTypeTags.ZOGLIN_TYPES);
        // sneak peek types
        tag(TCEntityTypeTags.CREAKING_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("minecraft:creaking")));
        tag(TCEntityTypeTags.HAPPY_GHAST_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("minecraft:happy_ghast")));
        tag(TCEntityTypeTags.BOGGED_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("minecraft:bogged")));
        tag(TCEntityTypeTags.BREEZE_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("aether:evil_whirlwind")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("aerther:whirlwind")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("minecraft:breeze")));
        // existing types
        tag(TCEntityTypeTags.ALLAY_TYPES)
                .add(EntityType.ALLAY);
        tag(TCEntityTypeTags.AXOLOTL_TYPES)
                .add(EntityType.AXOLOTL);
        tag(TCEntityTypeTags.BAT_TYPES)
                .add(EntityType.BAT);
        tag(TCEntityTypeTags.BEE_TYPES)
                .add(EntityType.BEE);
        tag(TCEntityTypeTags.BLAZE_TYPES)
                .add(EntityType.BLAZE);
        tag(TCEntityTypeTags.CAMEL_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("minecraft:camel")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("ecologics:camel")));
        tag(TCEntityTypeTags.CAT_TYPES)
                .add(EntityType.CAT);
        tag(TCEntityTypeTags.CAVE_SPIDER_TYPES)
                .add(EntityType.CAVE_SPIDER);
        tag(TCEntityTypeTags.CHICKEN_TYPES)
                .add(EntityType.CHICKEN);
        tag(TCEntityTypeTags.COD_TYPES)
                .add(EntityType.COD);
        tag(TCEntityTypeTags.COPPER_GOLEM_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:copper_golem")));
        tag(TCEntityTypeTags.RASCAL_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:rascal")));
        tag(TCEntityTypeTags.COW_TYPES)
                .add(EntityType.COW);
        tag(TCEntityTypeTags.CRAB_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("ecologics:coconut_crab")));
        tag(TCEntityTypeTags.CREEPER_TYPES)
                .add(EntityType.CREEPER);
        tag(TCEntityTypeTags.DOLPHIN_TYPES)
                .add(EntityType.DOLPHIN);
        tag(TCEntityTypeTags.DONKEY_TYPES)
                .add(EntityType.DONKEY);
        tag(TCEntityTypeTags.DROWNED_TYPES)
                .add(EntityType.DROWNED);
        tag(TCEntityTypeTags.ELDER_GUARDIAN_TYPES)
                .add(EntityType.ELDER_GUARDIAN);
        tag(TCEntityTypeTags.ENDER_DRAGON_TYPES)
                .add(EntityType.ENDER_DRAGON);
        tag(TCEntityTypeTags.ENDERMAN_TYPES)
                .add(EntityType.ENDERMAN)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:undead_enderling")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:dragling")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:endstone_trapper")));
        tag(TCEntityTypeTags.ENDERMITES_TYPES)
                .add(EntityType.ENDERMITE)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:ender_blob")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:ender_firefly")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:bolok")))
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("phantasm:crystie")));
        tag(TCEntityTypeTags.EVOKER_TYPES)
                .add(EntityType.EVOKER);
        tag(TCEntityTypeTags.FOX_TYPES)
                .add(EntityType.FOX);
        tag(TCEntityTypeTags.FROG_TYPES)
                .add(EntityType.FROG);
        tag(TCEntityTypeTags.GHAST_TYPES)
                .add(EntityType.GHAST);
        tag(TCEntityTypeTags.GLARE_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:glare")));
        tag(TCEntityTypeTags.GLOW_SQUID_TYPES)
                .add(EntityType.GIANT);
        tag(TCEntityTypeTags.GIANT_TYPES)
                .add(EntityType.GLOW_SQUID);
        tag(TCEntityTypeTags.GOAT_TYPES)
                .add(EntityType.GOAT);
        tag(TCEntityTypeTags.GUARD_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("guardvillagers:guard")));
        tag(TCEntityTypeTags.GUARDIAN_TYPES)
                .add(EntityType.GUARDIAN);
        tag(TCEntityTypeTags.HOGLIN_TYPES)
                .add(EntityType.HOGLIN);
        tag(TCEntityTypeTags.HORSE_TYPES)
                .add(EntityType.HORSE);
        tag(TCEntityTypeTags.HUSK_TYPES)
                .add(EntityType.HUSK);
        tag(TCEntityTypeTags.ICEOLOGER_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:iceologer")));
        tag(TCEntityTypeTags.ILLUSIONER_TYPES)
                .add(EntityType.ILLUSIONER);
        tag(TCEntityTypeTags.IRON_GOLEM_TYPES)
                .add(EntityType.IRON_GOLEM)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("unusualend:endstone_golem")));
        tag(TCEntityTypeTags.LLAMA_TYPES)
                .add(EntityType.LLAMA);
        tag(TCEntityTypeTags.MAGMA_CUBE_TYPES)
                .add(EntityType.MAGMA_CUBE);
        tag(TCEntityTypeTags.MAULER_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:mauler")));
        tag(TCEntityTypeTags.MULE_TYPES)
                .add(EntityType.MULE);
        tag(TCEntityTypeTags.MOOBLOOM_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:moobloom")));
        tag(TCEntityTypeTags.MOOSHROOM_TYPES)
                .add(EntityType.MOOSHROOM);
        tag(TCEntityTypeTags.NUMISMATIST_TYPES)
                .add(TCEntityTypes.NUMISMATIST.get());
        tag(TCEntityTypeTags.OCELOT_TYPES)
                .add(EntityType.OCELOT);
        tag(TCEntityTypeTags.PANDA_TYPES)
                .add(EntityType.PANDA);
        tag(TCEntityTypeTags.PARROT_TYPES)
                .add(EntityType.PARROT);
        tag(TCEntityTypeTags.PENGUIN_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("ecologics:penguin")));
        tag(TCEntityTypeTags.PHANTOM_TYPES)
                .add(EntityType.PHANTOM);
        tag(TCEntityTypeTags.PIG_TYPES)
                .add(EntityType.PIG);
        tag(TCEntityTypeTags.PIGLIN_TYPES)
                .add(EntityType.PIGLIN);
        tag(TCEntityTypeTags.PIGLIN_BRUTE_TYPES)
                .add(EntityType.PIGLIN_BRUTE);
        tag(TCEntityTypeTags.PIGLIN_MERCHANT_TYPES)
                .add(TCEntityTypes.PIGLINMERCHANT.get());
        tag(TCEntityTypeTags.PILLAGER_TYPES)
                .add(EntityType.PILLAGER);
        tag(TCEntityTypeTags.POLAR_BEAR_TYPES)
                .add(EntityType.POLAR_BEAR);
        tag(TCEntityTypeTags.PUFFERFISH_TYPES)
                .add(EntityType.PUFFERFISH);
        tag(TCEntityTypeTags.RABBIT_TYPES)
                .add(EntityType.RABBIT);
        tag(TCEntityTypeTags.RAVAGER_TYPES)
                .add(EntityType.RAVAGER);
        tag(TCEntityTypeTags.SALMON_TYPES)
                .add(EntityType.SALMON);
        tag(TCEntityTypeTags.SHEEP_TYPES)
                .add(EntityType.SHEEP);
        tag(TCEntityTypeTags.SHULKER_TYPES)
                .add(EntityType.SHULKER);
        tag(TCEntityTypeTags.SILVERFISH_TYPES)
                .add(EntityType.SILVERFISH);
        tag(TCEntityTypeTags.SKELETON_TYPES)
                .add(EntityType.SKELETON);
        tag(TCEntityTypeTags.SKELETON_HORSE_TYPES)
                .add(EntityType.SKELETON_HORSE);
        tag(TCEntityTypeTags.SLIME_TYPES)
                .add(EntityType.SLIME);
        tag(TCEntityTypeTags.SNIFFER_TYPES)
                .add(EntityType.SNIFFER);
        tag(TCEntityTypeTags.ARMAIDLLO_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("minecraft:armadillo")));
        tag(TCEntityTypeTags.SNOW_GOLEM_TYPES)
                .add(EntityType.SNOW_GOLEM);
        tag(TCEntityTypeTags.SPIDER_TYPES)
                .add(EntityType.SPIDER);
        tag(TCEntityTypeTags.SQUID_TYPES)
                .add(EntityType.SQUID);
        tag(TCEntityTypeTags.SQUIRREL_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("ecologics:squirrel")));
        tag(TCEntityTypeTags.STRAY_TYPES)
                .add(EntityType.STRAY);
        tag(TCEntityTypeTags.STRIDER_TYPES)
                .add(EntityType.STRIDER);
        tag(TCEntityTypeTags.TADPOLE_TYPES)
                .add(EntityType.TADPOLE);
        tag(TCEntityTypeTags.TRADER_LLAMA_TYPES)
                .add(EntityType.TRADER_LLAMA);
        tag(TCEntityTypeTags.TROPICAL_FISH_TYPES)
                .add(EntityType.TROPICAL_FISH);
        tag(TCEntityTypeTags.TUFF_GOLEM_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:tuff_golem")));
        tag(TCEntityTypeTags.WILDFIRE_TYPES)
                .addOptional(Objects.requireNonNull(ResourceLocation.tryParse("friendsandfoes:wildfire")));
        tag(TCEntityTypeTags.TURTLE_TYPES)
                .add(EntityType.TURTLE);
        tag(TCEntityTypeTags.VEX_TYPES)
                .add(EntityType.VEX);
        tag(TCEntityTypeTags.VILLAGER_TYPES)
                .add(EntityType.VILLAGER);
        tag(TCEntityTypeTags.VINDICATOR_TYPES)
                .add(EntityType.VINDICATOR);
        tag(TCEntityTypeTags.WANDERING_TRADER_TYPES)
                .add(EntityType.WANDERING_TRADER);
        tag(TCEntityTypeTags.WARDEN_TYPES)
                .add(EntityType.WARDEN);
        tag(TCEntityTypeTags.WITCH_TYPES)
                .add(EntityType.WITCH);
        tag(TCEntityTypeTags.WITHER_TYPES)
                .add(EntityType.WITHER);
        tag(TCEntityTypeTags.WITHER_SKELETON_TYPES)
                .add(EntityType.WITHER_SKELETON);
        tag(TCEntityTypeTags.WOLF_TYPES)
                .add(EntityType.WOLF);
        tag(TCEntityTypeTags.ZOGLIN_TYPES)
                .add(EntityType.ZOGLIN);
        tag(TCEntityTypeTags.ZOMBIE_TYPES)
                .add(EntityType.ZOMBIE);
        tag(TCEntityTypeTags.ZOMBIE_HORSE_TYPES)
                .add(EntityType.ZOMBIE_HORSE);
        tag(TCEntityTypeTags.ZOMBIFIED_PIGLIN_TYPES)
                .add(EntityType.ZOMBIFIED_PIGLIN);
        tag(TCEntityTypeTags.ZOMBIE_VILLAGER_TYPES)
                .add(EntityType.ZOMBIE_VILLAGER);
    }
}